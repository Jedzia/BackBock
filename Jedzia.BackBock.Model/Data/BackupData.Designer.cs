// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>Jedzia.BackBock.Model.Data</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>None</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings>Jedzia.BackBock.SharedTypes</CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Jedzia.BackBock.Model.Data {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using Jedzia.BackBock.SharedTypes;
    using System.Collections.Generic;
    
    
    [Serializable]
    public partial class BackupData : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<BackupItemType> backupItemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string datasetNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string datasetGroupField;
        
        /// <summary>
        /// BackupData class constructor
        /// </summary>
        public BackupData() {
            this.backupItemField = new List<BackupItemType>();
        }
        
        public List<BackupItemType> BackupItem {
            get {
                return this.backupItemField;
            }
            set {
                if ((this.backupItemField != null)) {
                    if ((backupItemField.Equals(value) != true)) {
                        this.backupItemField = value;
                        this.OnPropertyChanged("BackupItem");
                    }
                }
                else {
                    this.backupItemField = value;
                    this.OnPropertyChanged("BackupItem");
                }
            }
        }
        
        public string DatasetName {
            get {
                return this.datasetNameField;
            }
            set {
                if ((this.datasetNameField != null)) {
                    if ((datasetNameField.Equals(value) != true)) {
                        this.datasetNameField = value;
                        this.OnPropertyChanged("DatasetName");
                    }
                }
                else {
                    this.datasetNameField = value;
                    this.OnPropertyChanged("DatasetName");
                }
            }
        }
        
        public string DatasetGroup {
            get {
                return this.datasetGroupField;
            }
            set {
                if ((this.datasetGroupField != null)) {
                    if ((datasetGroupField.Equals(value) != true)) {
                        this.datasetGroupField = value;
                        this.OnPropertyChanged("DatasetGroup");
                    }
                }
                else {
                    this.datasetGroupField = value;
                    this.OnPropertyChanged("DatasetGroup");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Serializable]
    public partial class BackupItemType : System.ComponentModel.INotifyPropertyChanged
    {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<PathDataType> pathField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TaskType taskField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemGroupField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool isEnabledField;
        
        public BackupItemType() {
            this.taskField = new TaskType();
            this.pathField = new List<PathDataType>();
            this.isEnabledField = false;
        }
        
        public List<PathDataType> Path {
            get {
                return this.pathField;
            }
            set {
                if ((this.pathField != null)) {
                    if ((pathField.Equals(value) != true)) {
                        this.pathField = value;
                        this.OnPropertyChanged("Path");
                    }
                }
                else {
                    this.pathField = value;
                    this.OnPropertyChanged("Path");
                }
            }
        }
        
        public TaskType Task {
            get {
                return this.taskField;
            }
            set {
                if ((this.taskField != null)) {
                    if ((taskField.Equals(value) != true)) {
                        this.taskField = value;
                        this.OnPropertyChanged("Task");
                    }
                }
                else {
                    this.taskField = value;
                    this.OnPropertyChanged("Task");
                }
            }
        }
        
        public string ItemName {
            get {
                return this.itemNameField;
            }
            set {
                if ((this.itemNameField != null)) {
                    if ((itemNameField.Equals(value) != true)) {
                        this.itemNameField = value;
                        this.OnPropertyChanged("ItemName");
                    }
                }
                else {
                    this.itemNameField = value;
                    this.OnPropertyChanged("ItemName");
                }
            }
        }
        
        public string ItemGroup {
            get {
                return this.itemGroupField;
            }
            set {
                if ((this.itemGroupField != null)) {
                    if ((itemGroupField.Equals(value) != true)) {
                        this.itemGroupField = value;
                        this.OnPropertyChanged("ItemGroup");
                    }
                }
                else {
                    this.itemGroupField = value;
                    this.OnPropertyChanged("ItemGroup");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IsEnabled {
            get {
                return this.isEnabledField;
            }
            set {
                if ((isEnabledField.Equals(value) != true)) {
                    this.isEnabledField = value;
                    this.OnPropertyChanged("IsEnabled");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Serializable]
    public partial class PathDataType : System.ComponentModel.INotifyPropertyChanged
    {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Wildcard> exclusionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Wildcard> inclusionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pathField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string userDataField;
        
        /// <summary>
        /// PathDataType class constructor
        /// </summary>
        public PathDataType() {
            this.inclusionField = new List<Wildcard>();
            this.exclusionField = new List<Wildcard>();
        }
        
        public List<Wildcard> Exclusion {
            get {
                return this.exclusionField;
            }
            set {
                if ((this.exclusionField != null)) {
                    if ((exclusionField.Equals(value) != true)) {
                        this.exclusionField = value;
                        this.OnPropertyChanged("Exclusion");
                    }
                }
                else {
                    this.exclusionField = value;
                    this.OnPropertyChanged("Exclusion");
                }
            }
        }
        
        public List<Wildcard> Inclusion {
            get {
                return this.inclusionField;
            }
            set {
                if ((this.inclusionField != null)) {
                    if ((inclusionField.Equals(value) != true)) {
                        this.inclusionField = value;
                        this.OnPropertyChanged("Inclusion");
                    }
                }
                else {
                    this.inclusionField = value;
                    this.OnPropertyChanged("Inclusion");
                }
            }
        }
        
        public string Path {
            get {
                return this.pathField;
            }
            set {
                if ((this.pathField != null)) {
                    if ((pathField.Equals(value) != true)) {
                        this.pathField = value;
                        this.OnPropertyChanged("Path");
                    }
                }
                else {
                    this.pathField = value;
                    this.OnPropertyChanged("Path");
                }
            }
        }
        
        public string UserData {
            get {
                return this.userDataField;
            }
            set {
                if ((this.userDataField != null)) {
                    if ((userDataField.Equals(value) != true)) {
                        this.userDataField = value;
                        this.OnPropertyChanged("UserData");
                    }
                }
                else {
                    this.userDataField = value;
                    this.OnPropertyChanged("UserData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Serializable]
    public partial class Wildcard : System.ComponentModel.INotifyPropertyChanged
    {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string patternField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool enabledField;
        
        public Wildcard() {
            this.enabledField = false;
        }
        
        public string Pattern {
            get {
                return this.patternField;
            }
            set {
                if ((this.patternField != null)) {
                    if ((patternField.Equals(value) != true)) {
                        this.patternField = value;
                        this.OnPropertyChanged("Pattern");
                    }
                }
                else {
                    this.patternField = value;
                    this.OnPropertyChanged("Pattern");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                if ((enabledField.Equals(value) != true)) {
                    this.enabledField = value;
                    this.OnPropertyChanged("Enabled");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Serializable]
    public partial class TaskType : System.ComponentModel.INotifyPropertyChanged
    {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string typeNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        /// <summary>
        /// TaskType class constructor
        /// </summary>
        public TaskType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                if ((this.typeNameField != null)) {
                    if ((typeNameField.Equals(value) != true)) {
                        this.typeNameField = value;
                        this.OnPropertyChanged("TypeName");
                    }
                }
                else {
                    this.typeNameField = value;
                    this.OnPropertyChanged("TypeName");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                if ((this.anyAttrField != null)) {
                    if ((anyAttrField.Equals(value) != true)) {
                        this.anyAttrField = value;
                        this.OnPropertyChanged("AnyAttr");
                    }
                }
                else {
                    this.anyAttrField = value;
                    this.OnPropertyChanged("AnyAttr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
