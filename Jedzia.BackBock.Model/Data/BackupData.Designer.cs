// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>Jedzia.BackBock.Model.Data</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings>Jedzia.BackBock.SharedTypes</CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Jedzia.BackBock.Model.Data {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using Jedzia.BackBock.SharedTypes;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class BackupData : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<BackupItemType> backupItemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string datasetNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BackupData class constructor
        /// </summary>
        public BackupData() {
            this.backupItemField = new List<BackupItemType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BackupItem", Order=0)]
        public List<BackupItemType> BackupItem {
            get {
                return this.backupItemField;
            }
            set {
                if ((this.backupItemField != null)) {
                    if ((backupItemField.Equals(value) != true)) {
                        this.backupItemField = value;
                        this.OnPropertyChanged("BackupItem");
                    }
                }
                else {
                    this.backupItemField = value;
                    this.OnPropertyChanged("BackupItem");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DatasetName {
            get {
                return this.datasetNameField;
            }
            set {
                if ((this.datasetNameField != null)) {
                    if ((datasetNameField.Equals(value) != true)) {
                        this.datasetNameField = value;
                        this.OnPropertyChanged("DatasetName");
                    }
                }
                else {
                    this.datasetNameField = value;
                    this.OnPropertyChanged("DatasetName");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BackupData));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BackupData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BackupData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BackupData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BackupData obj, out System.Exception exception) {
            exception = null;
            obj = default(BackupData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BackupData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BackupData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BackupData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BackupData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BackupData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BackupData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BackupData obj, out System.Exception exception) {
            exception = null;
            obj = default(BackupData);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BackupData obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BackupData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BackupData LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BackupData LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("BackupItem", Namespace="", IsNullable=false)]
    public partial class BackupItemType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<PathDataType> pathField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TaskType taskField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool isEnabledField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public BackupItemType() {
            this.taskField = new TaskType();
            this.pathField = new List<PathDataType>();
            this.isEnabledField = false;
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Path", Order=0)]
        public List<PathDataType> Path {
            get {
                return this.pathField;
            }
            set {
                if ((this.pathField != null)) {
                    if ((pathField.Equals(value) != true)) {
                        this.pathField = value;
                        this.OnPropertyChanged("Path");
                    }
                }
                else {
                    this.pathField = value;
                    this.OnPropertyChanged("Path");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public TaskType Task {
            get {
                return this.taskField;
            }
            set {
                if ((this.taskField != null)) {
                    if ((taskField.Equals(value) != true)) {
                        this.taskField = value;
                        this.OnPropertyChanged("Task");
                    }
                }
                else {
                    this.taskField = value;
                    this.OnPropertyChanged("Task");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ItemName {
            get {
                return this.itemNameField;
            }
            set {
                if ((this.itemNameField != null)) {
                    if ((itemNameField.Equals(value) != true)) {
                        this.itemNameField = value;
                        this.OnPropertyChanged("ItemName");
                    }
                }
                else {
                    this.itemNameField = value;
                    this.OnPropertyChanged("ItemName");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IsEnabled {
            get {
                return this.isEnabledField;
            }
            set {
                if ((isEnabledField.Equals(value) != true)) {
                    this.isEnabledField = value;
                    this.OnPropertyChanged("IsEnabled");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BackupItemType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BackupItemType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BackupItemType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BackupItemType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BackupItemType obj, out System.Exception exception) {
            exception = null;
            obj = default(BackupItemType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BackupItemType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BackupItemType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BackupItemType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BackupItemType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BackupItemType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BackupItemType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BackupItemType obj, out System.Exception exception) {
            exception = null;
            obj = default(BackupItemType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BackupItemType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BackupItemType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BackupItemType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BackupItemType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Path", Namespace="", IsNullable=false)]
    public partial class PathDataType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Wildcard> exclusionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Wildcard> inclusionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pathField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string userDataField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PathDataType class constructor
        /// </summary>
        public PathDataType() {
            this.inclusionField = new List<Wildcard>();
            this.exclusionField = new List<Wildcard>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Exclusion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public List<Wildcard> Exclusion {
            get {
                return this.exclusionField;
            }
            set {
                if ((this.exclusionField != null)) {
                    if ((exclusionField.Equals(value) != true)) {
                        this.exclusionField = value;
                        this.OnPropertyChanged("Exclusion");
                    }
                }
                else {
                    this.exclusionField = value;
                    this.OnPropertyChanged("Exclusion");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Inclusion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public List<Wildcard> Inclusion {
            get {
                return this.inclusionField;
            }
            set {
                if ((this.inclusionField != null)) {
                    if ((inclusionField.Equals(value) != true)) {
                        this.inclusionField = value;
                        this.OnPropertyChanged("Inclusion");
                    }
                }
                else {
                    this.inclusionField = value;
                    this.OnPropertyChanged("Inclusion");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Path {
            get {
                return this.pathField;
            }
            set {
                if ((this.pathField != null)) {
                    if ((pathField.Equals(value) != true)) {
                        this.pathField = value;
                        this.OnPropertyChanged("Path");
                    }
                }
                else {
                    this.pathField = value;
                    this.OnPropertyChanged("Path");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string UserData {
            get {
                return this.userDataField;
            }
            set {
                if ((this.userDataField != null)) {
                    if ((userDataField.Equals(value) != true)) {
                        this.userDataField = value;
                        this.OnPropertyChanged("UserData");
                    }
                }
                else {
                    this.userDataField = value;
                    this.OnPropertyChanged("UserData");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PathDataType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PathDataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PathDataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PathDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PathDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(PathDataType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PathDataType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PathDataType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PathDataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PathDataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PathDataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PathDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PathDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(PathDataType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PathDataType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PathDataType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PathDataType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PathDataType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Wildcard : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string patternField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool enabledField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public Wildcard() {
            this.enabledField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Pattern {
            get {
                return this.patternField;
            }
            set {
                if ((this.patternField != null)) {
                    if ((patternField.Equals(value) != true)) {
                        this.patternField = value;
                        this.OnPropertyChanged("Pattern");
                    }
                }
                else {
                    this.patternField = value;
                    this.OnPropertyChanged("Pattern");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                if ((enabledField.Equals(value) != true)) {
                    this.enabledField = value;
                    this.OnPropertyChanged("Enabled");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Wildcard));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Wildcard object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Wildcard object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Wildcard object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Wildcard obj, out System.Exception exception) {
            exception = null;
            obj = default(Wildcard);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Wildcard obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Wildcard Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Wildcard)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Wildcard object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Wildcard object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Wildcard object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Wildcard obj, out System.Exception exception) {
            exception = null;
            obj = default(Wildcard);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Wildcard obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Wildcard obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Wildcard LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Wildcard LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class TaskType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string typeNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// TaskType class constructor
        /// </summary>
        public TaskType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                if ((this.typeNameField != null)) {
                    if ((typeNameField.Equals(value) != true)) {
                        this.typeNameField = value;
                        this.OnPropertyChanged("TypeName");
                    }
                }
                else {
                    this.typeNameField = value;
                    this.OnPropertyChanged("TypeName");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                if ((this.anyAttrField != null)) {
                    if ((anyAttrField.Equals(value) != true)) {
                        this.anyAttrField = value;
                        this.OnPropertyChanged("AnyAttr");
                    }
                }
                else {
                    this.anyAttrField = value;
                    this.OnPropertyChanged("AnyAttr");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TaskType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaskType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TaskType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaskType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TaskType obj, out System.Exception exception) {
            exception = null;
            obj = default(TaskType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TaskType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TaskType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TaskType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current TaskType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TaskType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaskType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaskType obj, out System.Exception exception) {
            exception = null;
            obj = default(TaskType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TaskType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out TaskType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TaskType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static TaskType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
