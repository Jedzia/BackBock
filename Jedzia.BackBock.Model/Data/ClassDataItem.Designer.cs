// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>Jedzia.BackBock.Model.Data</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>True</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Jedzia.BackBock.Model.Data
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    /// <summary>
    /// Contains the DTO layer for class diagram data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class ClassDataItem : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemTypeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string colorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string scopeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string accessSpecifierField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool staticField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string signatureField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string parameternamesField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string returnTypeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool isConstructorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string displayDataField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public ClassDataItem()
        {
            this.staticField = false;
            this.isConstructorField = false;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ItemType
        {
            get
            {
                return this.itemTypeField;
            }
            set
            {
                if ((this.itemTypeField != null))
                {
                    if ((itemTypeField.Equals(value) != true))
                    {
                        this.itemTypeField = value;
                        this.OnPropertyChanged("ItemType");
                    }
                }
                else
                {
                    this.itemTypeField = value;
                    this.OnPropertyChanged("ItemType");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                if ((this.colorField != null))
                {
                    if ((colorField.Equals(value) != true))
                    {
                        this.colorField = value;
                        this.OnPropertyChanged("Color");
                    }
                }
                else
                {
                    this.colorField = value;
                    this.OnPropertyChanged("Color");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Scope
        {
            get
            {
                return this.scopeField;
            }
            set
            {
                if ((this.scopeField != null))
                {
                    if ((scopeField.Equals(value) != true))
                    {
                        this.scopeField = value;
                        this.OnPropertyChanged("Scope");
                    }
                }
                else
                {
                    this.scopeField = value;
                    this.OnPropertyChanged("Scope");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AccessSpecifier
        {
            get
            {
                return this.accessSpecifierField;
            }
            set
            {
                if ((this.accessSpecifierField != null))
                {
                    if ((accessSpecifierField.Equals(value) != true))
                    {
                        this.accessSpecifierField = value;
                        this.OnPropertyChanged("AccessSpecifier");
                    }
                }
                else
                {
                    this.accessSpecifierField = value;
                    this.OnPropertyChanged("AccessSpecifier");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Static
        {
            get
            {
                return this.staticField;
            }
            set
            {
                if ((staticField.Equals(value) != true))
                {
                    this.staticField = value;
                    this.OnPropertyChanged("Static");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Signature
        {
            get
            {
                return this.signatureField;
            }
            set
            {
                if ((this.signatureField != null))
                {
                    if ((signatureField.Equals(value) != true))
                    {
                        this.signatureField = value;
                        this.OnPropertyChanged("Signature");
                    }
                }
                else
                {
                    this.signatureField = value;
                    this.OnPropertyChanged("Signature");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Parameternames
        {
            get
            {
                return this.parameternamesField;
            }
            set
            {
                if ((this.parameternamesField != null))
                {
                    if ((parameternamesField.Equals(value) != true))
                    {
                        this.parameternamesField = value;
                        this.OnPropertyChanged("Parameternames");
                    }
                }
                else
                {
                    this.parameternamesField = value;
                    this.OnPropertyChanged("Parameternames");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ReturnType
        {
            get
            {
                return this.returnTypeField;
            }
            set
            {
                if ((this.returnTypeField != null))
                {
                    if ((returnTypeField.Equals(value) != true))
                    {
                        this.returnTypeField = value;
                        this.OnPropertyChanged("ReturnType");
                    }
                }
                else
                {
                    this.returnTypeField = value;
                    this.OnPropertyChanged("ReturnType");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IsConstructor
        {
            get
            {
                return this.isConstructorField;
            }
            set
            {
                if ((isConstructorField.Equals(value) != true))
                {
                    this.isConstructorField = value;
                    this.OnPropertyChanged("IsConstructor");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DisplayData
        {
            get
            {
                return this.displayDataField;
            }
            set
            {
                if ((this.displayDataField != null))
                {
                    if ((displayDataField.Equals(value) != true))
                    {
                        this.displayDataField = value;
                        this.OnPropertyChanged("DisplayData");
                    }
                }
                else
                {
                    this.displayDataField = value;
                    this.OnPropertyChanged("DisplayData");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ClassDataItem));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ClassDataItem object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ClassDataItem object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ClassDataItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ClassDataItem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClassDataItem);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ClassDataItem obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ClassDataItem Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ClassDataItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ClassDataItem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ClassDataItem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ClassDataItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ClassDataItem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClassDataItem);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ClassDataItem obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ClassDataItem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ClassDataItem LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static ClassDataItem LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this ClassDataItem object
        /// </summary>
        public virtual ClassDataItem Clone()
        {
            return ((ClassDataItem)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class ClassDataItemList : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<ClassDataItem> classDataItemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string typeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string colorField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// The List of Class Members
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ClassDataItem", Order = 0)]
        public List<ClassDataItem> ClassDataItem
        {
            get
            {
                if ((this.classDataItemField == null))
                {
                    this.classDataItemField = new List<ClassDataItem>();
                }
                return this.classDataItemField;
            }
            set
            {
                if ((this.classDataItemField != null))
                {
                    if ((classDataItemField.Equals(value) != true))
                    {
                        this.classDataItemField = value;
                        this.OnPropertyChanged("ClassDataItem");
                    }
                }
                else
                {
                    this.classDataItemField = value;
                    this.OnPropertyChanged("ClassDataItem");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                if ((this.typeField != null))
                {
                    if ((typeField.Equals(value) != true))
                    {
                        this.typeField = value;
                        this.OnPropertyChanged("Type");
                    }
                }
                else
                {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                if ((this.colorField != null))
                {
                    if ((colorField.Equals(value) != true))
                    {
                        this.colorField = value;
                        this.OnPropertyChanged("Color");
                    }
                }
                else
                {
                    this.colorField = value;
                    this.OnPropertyChanged("Color");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ClassDataItemList));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ClassDataItemList object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ClassDataItemList object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ClassDataItemList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ClassDataItemList obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClassDataItemList);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ClassDataItemList obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ClassDataItemList Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ClassDataItemList)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ClassDataItemList object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ClassDataItemList object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ClassDataItemList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ClassDataItemList obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClassDataItemList);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ClassDataItemList obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ClassDataItemList obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ClassDataItemList LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static ClassDataItemList LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this ClassDataItemList object
        /// </summary>
        public virtual ClassDataItemList Clone()
        {
            return ((ClassDataItemList)(this.MemberwiseClone()));
        }
        #endregion
    }
}
