//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:v2.0.50727
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/*
This code was automatically generated at 02/26/2012 07:08:41 by 
        Jedzia's ViewModel generator.
Changes to this file may be lost if regeneration occurs.
http://xxx.com
*/
// Config = Debug DefaultNamespace = Jedzia.BackBock.ViewModel

using System.Collections.Generic;
using Jedzia.BackBock.SharedTypes;
using Jedzia.BackBock.Model.Data;
using Jedzia.BackBock.ViewModel.MainWindow;
using System;
using System.ComponentModel.DataAnnotations;


namespace Jedzia.BackBock.ViewModel.Data
{

    /// <summary>
    /// The summary of BackupDataViewModel. BaseType: 
    /// </summary>
    public partial class BackupDataViewModel : Jedzia.BackBock.ViewModel.MVVM.Validation.ValidatingViewModelBase<BackupData>
    {
        /*private BackupData data;

        public BackupData DataObject
        {
            get { return data; }
            protected set { data = value; }
        }*/

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupDataViewModel"/> class.
        /// </summary>
        /// <param name="backupData">The backup data.</param>
        public BackupDataViewModel(BackupData backupData)
            : base(backupData)
        {
            //this.data = backupData;
        }

        // BackupItem. HasFacets: False AttrQName: 
        //                   propertyType: System.Collections.ObjectModel.ObservableCollection<BackupItemType>, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// The summary. 
        /// </summary>
        private System.Collections.ObjectModel.ObservableCollection<BackupItemViewModel> backupitem;

        /// <summary>
        /// Gets the backup items.
        /// </summary>
        public System.Collections.ObjectModel.ObservableCollection<BackupItemViewModel> BackupItems
        {
            get
            {
                if (this.backupitem == null)
                {
                    this.backupitem = new System.Collections.ObjectModel.ObservableCollection<BackupItemViewModel>();
                    foreach (var item in this.data.BackupItem)
                    {
                        var colItem = new BackupItemViewModel(item);
                        colItem.PropertyChanged += OnDataPropertyChanged;
                        this.backupitem.Add(colItem);
                    }
                    this.backupitem.CollectionChanged += OnBackupItemCollectionChanged;
                }
                return this.backupitem;
            }
        }

        /// <summary>
        /// Called when [backup item collection changed].
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        protected virtual void OnBackupItemCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            BackupItemCollectionChanged(sender, e);
        }

        /// <summary>
        /// Backups the item collection changed.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        partial void BackupItemCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        // DatasetName. HasFacets: False AttrQName: 
        //                   propertyType: System.String, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the DatasetName. HasFacets: False AttrQName:
        /// </summary>
        /// <value>
        /// The DatasetName.
        /// </value>
        /// // Attribute
        [StringLength(10)]
        [Required]
        public System.String DatasetName
        {
            get
            {
                return this.data.DatasetName;
            }

            set
            {
                if (this.data.DatasetName == value)
                {
                    return;
                }

                this.data.DatasetName = value;
                //bool isValid = ValidateProperty("DatasetName", value);
                bool isValid = ValidateWithSubProperty("DatasetName");
                RaisePropertyChanged("DatasetName");
            }
        }

        /// <summary>
        /// Gets or sets the dataset group.
        /// </summary>
        /// <value>
        /// The dataset group.
        /// </value>
        public System.String DatasetGroup
        {
            get
            {
                return this.data.DatasetGroup;
            }

            set
            {
                if (this.data.DatasetGroup == value)
                {
                    return;
                }
                this.data.DatasetGroup = value;
                RaisePropertyChanged("DatasetGroup");
            }
        }

        /// <summary>
        /// Called when [data property changed].
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        protected virtual void OnDataPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            DataPropertyChanged(sender, e);
        }

        /// <summary>
        /// Datas the property changed.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        partial void DataPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e);

        /// <summary>
        /// Clones this instance.
        /// </summary>
        /// <returns></returns>
        public BackupDataViewModel Clone()
        {
            return (BackupDataViewModel)this.MemberwiseClone();
        }
    } 
}
