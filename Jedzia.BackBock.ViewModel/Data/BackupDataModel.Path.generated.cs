//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:v2.0.50727
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/*
This code was automatically generated at 02/26/2012 02:54:05 by 
        Jedzia's ViewModel generator.
Changes to this file may be lost if regeneration occurs.
http://xxx.com
*/
// Config = Debug DefaultNamespace = Jedzia.BackBock.ViewModel

using System.Collections.Generic;
using Jedzia.BackBock.SharedTypes;
using Jedzia.BackBock.Model.Data;
using Jedzia.BackBock.ViewModel.MainWindow;


namespace Jedzia.BackBock.ViewModel.Data
{

    /// <summary>
    /// The summary of PathViewModel. BaseType: 
    /// </summary>
    public partial class PathViewModel : ViewModelBase
    {
        internal PathDataType path;

        public PathViewModel(PathDataType path)
        {
            this.path = path;
        }

        // Exclusion. HasFacets: False AttrQName: 
        //                   propertyType: System.Collections.ObjectModel.ObservableCollection<Wildcard>, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// The summary. 
        /// </summary>
        private System.Collections.ObjectModel.ObservableCollection<ExclusionViewModel> exclusion;

        public System.Collections.ObjectModel.ObservableCollection<ExclusionViewModel> Exclusions
        {
            get
            {
                if (this.exclusion == null)
                {
                    this.exclusion = new System.Collections.ObjectModel.ObservableCollection<ExclusionViewModel>();
                    foreach (var item in this.path.Exclusion)
                    {
                        var colItem = new ExclusionViewModel(item);
                        colItem.PropertyChanged += OnDataPropertyChanged;
                        this.exclusion.Add(colItem);
                    }
                    this.exclusion.CollectionChanged += OnExclusionCollectionChanged;
                }
                return this.exclusion;
            }
        }

        protected virtual void OnExclusionCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            ExclusionCollectionChanged(sender, e);
        }

        partial void ExclusionCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        // Inclusion. HasFacets: False AttrQName: 
        //                   propertyType: System.Collections.ObjectModel.ObservableCollection<Wildcard>, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// The summary. 
        /// </summary>
        private System.Collections.ObjectModel.ObservableCollection<InclusionViewModel> inclusion;

        public System.Collections.ObjectModel.ObservableCollection<InclusionViewModel> Inclusions
        {
            get
            {
                if (this.inclusion == null)
                {
                    this.inclusion = new System.Collections.ObjectModel.ObservableCollection<InclusionViewModel>();
                    foreach (var item in this.path.Inclusion)
                    {
                        var colItem = new InclusionViewModel(item);
                        colItem.PropertyChanged += OnDataPropertyChanged;
                        this.inclusion.Add(colItem);
                    }
                    this.inclusion.CollectionChanged += OnInclusionCollectionChanged;
                }
                return this.inclusion;
            }
        }

        protected virtual void OnInclusionCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            InclusionCollectionChanged(sender, e);
        }

        partial void InclusionCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        // Path. HasFacets: False AttrQName: 
        //                   propertyType: System.String, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the Path. HasFacets: False AttrQName: 
        /// </summary> // Attribute
        /// <value>The Path.</value>
        public System.String Path
        {
            get
            {
                return this.path.Path;
            }

            set
            {
                if (this.path.Path == value)
                {
                    return;
                }
                this.path.Path = value;
                RaisePropertyChanged("Path");
            }
        }

        // UserData. HasFacets: False AttrQName: 
        //                   propertyType: System.String, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the UserData. HasFacets: False AttrQName: 
        /// </summary> // Attribute
        /// <value>The UserData.</value>
        public System.String UserData
        {
            get
            {
                return this.path.UserData;
            }

            set
            {
                if (this.path.UserData == value)
                {
                    return;
                }
                this.path.UserData = value;
                RaisePropertyChanged("UserData");
            }
        }

        protected virtual void OnDataPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            DataPropertyChanged(sender, e);
        }

        partial void DataPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e);

        public PathViewModel Clone()
        {
            return (PathViewModel)this.MemberwiseClone();
        }
    } 
}
