//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:v2.0.50727
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/*
This code was automatically generated at 02/18/2012 18:38:25 by 
        Jedzia's ViewModel generator.
Changes to this file may be lost if regeneration occurs.
http://xxx.com
*/
// Config = Debug DefaultNamespace = Jedzia.BackBock.ViewModel

using System.Collections.Generic;
using Jedzia.BackBock.SharedTypes;
using Jedzia.BackBock.Model.Data;
using Jedzia.BackBock.ViewModel.MainWindow;


namespace Jedzia.BackBock.ViewModel.Data.Hierarchical
{

    /// <summary>
    /// The summary of DerivedFromViewModel. BaseType: ClassMember
    /// </summary>
    public partial class DerivedFromViewModel : ClassMemberViewModel
    {
        internal Derive derivedfrom;

        public DerivedFromViewModel(Derive derivedFrom)
            : base(derivedFrom)
        {
            this.derivedfrom = derivedFrom;
        }

        // Test. HasFacets: False AttrQName: 
        //                   propertyType: System.String, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the Test. HasFacets: False AttrQName: 
        /// </summary> // Attribute
        /// <value>The Test.</value>
        public System.String Test
        {
            get
            {
                return this.derivedfrom.Test;
            }

            set
            {
                if (this.derivedfrom.Test == value)
                {
                    return;
                }
                this.derivedfrom.Test = value;
                RaisePropertyChanged("Test");
            }
        }

        // Nix. HasFacets: False AttrQName: 
        //                   propertyType: System.Boolean, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the Nix. HasFacets: False AttrQName: 
        /// </summary> // Attribute
        /// <value>The Nix.</value>
        public System.Boolean Nix
        {
            get
            {
                return this.derivedfrom.Nix;
            }

            set
            {
                if (this.derivedfrom.Nix == value)
                {
                    return;
                }
                this.derivedfrom.Nix = value;
                RaisePropertyChanged("Nix");
            }
        }

        // Rotz. HasFacets: False AttrQName: 
        //                   propertyType: System.Boolean, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the Rotz. HasFacets: False AttrQName: 
        /// </summary> // Attribute
        /// <value>The Rotz.</value>
        public System.Boolean Rotz
        {
            get
            {
                return this.derivedfrom.Rotz;
            }

            set
            {
                if (this.derivedfrom.Rotz == value)
                {
                    return;
                }
                this.derivedfrom.Rotz = value;
                RaisePropertyChanged("Rotz");
            }
        }

        // Blafasel. HasFacets: False AttrQName: 
        //                   propertyType: System.DateTime, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the Blafasel. HasFacets: False AttrQName: 
        /// </summary> // Attribute
        /// <value>The Blafasel.</value>
        public System.DateTime Blafasel
        {
            get
            {
                return this.derivedfrom.Blafasel;
            }

            set
            {
                if (this.derivedfrom.Blafasel == value)
                {
                    return;
                }
                this.derivedfrom.Blafasel = value;
                RaisePropertyChanged("Blafasel");
            }
        }

        // IsInterface. HasFacets: False AttrQName: 
        //                   propertyType: System.Boolean, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the IsInterface. HasFacets: False AttrQName: 
        /// </summary> // Attribute
        /// <value>The IsInterface.</value>
        public System.Boolean IsInterface
        {
            get
            {
                return this.derivedfrom.IsInterface;
            }

            set
            {
                if (this.derivedfrom.IsInterface == value)
                {
                    return;
                }
                this.derivedfrom.IsInterface = value;
                RaisePropertyChanged("IsInterface");
            }
        }

        protected virtual void OnDataPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            DataPropertyChanged(sender, e);
        }

        partial void DataPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e);

        public DerivedFromViewModel Clone()
        {
            return (DerivedFromViewModel)this.MemberwiseClone();
        }
    } 
}
