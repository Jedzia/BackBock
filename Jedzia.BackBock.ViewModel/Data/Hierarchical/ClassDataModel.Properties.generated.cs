//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:v2.0.50727
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/*
This code was automatically generated at 02/18/2012 18:38:25 by 
        Jedzia's ViewModel generator.
Changes to this file may be lost if regeneration occurs.
http://xxx.com
*/
// Config = Debug DefaultNamespace = Jedzia.BackBock.ViewModel

using System.Collections.Generic;
using Jedzia.BackBock.SharedTypes;
using Jedzia.BackBock.Model.Data;
using Jedzia.BackBock.ViewModel.MainWindow;


namespace Jedzia.BackBock.ViewModel.Data.Hierarchical
{

    /// <summary>
    /// The summary of PropertiesViewModel. BaseType: ClassMember
    /// </summary>
    public partial class PropertiesViewModel : ClassMemberViewModel
    {
        internal Property properties;

        public PropertiesViewModel(Property properties)
            : base(properties)
        {
            this.properties = properties;
        }

        // ValueType. HasFacets: True AttrQName: FieldValueType
        //                   propertyType: System.String, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the ValueType. HasFacets: True AttrQName: FieldValueType
        /// </summary> // Attribute
        /// <value>The ValueType.</value>
        public FieldValueType ValueType
        {
            get
            {
                return this.properties.ValueType;
            }

            set
            {
                if (this.properties.ValueType == value)
                {
                    return;
                }
                this.properties.ValueType = value;
                RaisePropertyChanged("ValueType");
            }
        }

        // Scope. HasFacets: True AttrQName: ScopeType
        //                   propertyType: System.String, IsChoiceRoot: False, BaseType: 
        //                   ListType: None, HasCommonBaseType: False, xxxx: 
        /// <summary>
        /// Gets or sets the Scope. HasFacets: True AttrQName: ScopeType
        /// </summary> // Attribute
        /// <value>The Scope.</value>
        public ScopeType Scope
        {
            get
            {
                return this.properties.Scope;
            }

            set
            {
                if (this.properties.Scope == value)
                {
                    return;
                }
                this.properties.Scope = value;
                RaisePropertyChanged("Scope");
            }
        }

        protected virtual void OnDataPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            DataPropertyChanged(sender, e);
        }

        partial void DataPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e);

        public PropertiesViewModel Clone()
        {
            return (PropertiesViewModel)this.MemberwiseClone();
        }
    } 
}
